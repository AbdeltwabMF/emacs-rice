#+options: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headlin
#+options: author:t broken-links:nil c:nil creator:nil
#+options: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:t
#+options: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+options: timestamp:t title:t toc:t todo:t |:t
#+title: Emacs For Enthusiast Developer
#+author: Abd El-Twab M. Fakhry
#+email: abdeltwab.m.fakhry@gmail.com
#+property: header-args:emacs-lisp :tangle init.el
#+language: en
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 28.1 (Org mode 9.5.2)
#+cite_export:

* Preface
GNU Emacs isn't a text editor, it's the ultimate productivity environment for hackers. This document contains the core parts of my Emacs configuration which drive the workflow I use every day.

#+BEGIN_QUOTE
My general working style is to write everything first with pencil and paper, sitting beside a big wastebasket. Then I use Emacs to enter the text into my machine.

---  Donald E. Knuth
#+END_QUOTE

* Table of Contents :TOC_9:
- [[#preface][Preface]]
- [[#header][Header]]
- [[#startup-performance][Startup Performance]]
- [[#package-manager][Package Manager]]
- [[#keep-it-clean][Keep it Clean]]
- [[#general-configuration][General Configuration]]
  - [[#user-interface][User Interface]]
  - [[#theme][Theme]]
  - [[#font][Font]]
    - [[#set-the-font][Set the font]]
    - [[#emojis-in-buffers][Emojis in buffers]]
  - [[#mode-line][Mode Line]]
    - [[#basic-customization][Basic Customization]]
    - [[#enable-mode-diminishing][Enable Mode Diminishing]]
    - [[#doom-modeline][Doom Modeline]]
  - [[#notifications][Notifications]]
  - [[#work-spaces][Work spaces]]
  - [[#highlight-matching-braces][Highlight Matching Braces]]
  - [[#displaying-world-time][Displaying World Time]]
  - [[#pinentry][Pinentry]]
  - [[#tramp][TRAMP]]
  - [[#server][Server]]
- [[#general-key-bindings][General Key Bindings]]
- [[#editing-configuration][Editing Configuration]]
  - [[#tab-widths][Tab Widths]]
  - [[#use-spaces-instead-of-tabs-for-indentation][Use Spaces instead of Tabs for Indentation]]
  - [[#automatically-clean-whitespace][Automatically Clean Whitespace]]
  - [[#history][History]]
    - [[#remembering-recently-edited-files][Remembering Recently Edited Files]]
    - [[#remembering-minibuffer-prompt-history][Remembering Minibuffer Prompt History]]
    - [[#remembering-the-last-place-you-visited-in-a-file][Remembering The Last Place You Visited in a File]]
  - [[#auto-saving-changed-files][Auto-Saving Changed Files]]
  - [[#auto-reverting-changed-files][Auto-Reverting Changed Files]]
  - [[#multiple-cursor][Multiple Cursor]]
  - [[#indentation][Indentation]]
  - [[#undo-tree][Undo Tree]]
- [[#completion-system][Completion System]]
  - [[#completions-in-regions-with-corfu][Completions in Regions with Corfu]]
  - [[#improved-candidate-filtering-with-orderless][Improved Candidate Filtering with Orderless]]
- [[#jumping-with-avy][Jumping with Avy]]
- [[#search-with-ivy][Search with Ivy]]
  - [[#making-m-x-great-again][Making M-x Great Again!]]
- [[#functional-environment][Functional Environment]]
- [[#buffer-management][Buffer Management]]
- [[#window-management][Window Management]]
  - [[#frame-scaling--zooming][Frame Scaling / Zooming]]
  - [[#window-selection-with-ace-window][Window Selection with Ace Window]]
  - [[#window-history-with-winner-mode][Window History with Winner Mode]]
  - [[#control-buffer-placement][Control Buffer Placement]]
- [[#credential-management][Credential Management]]
- [[#project-management][Project Management]]
  - [[#projectile][Projectile]]
  - [[#counsel-projectile][Counsel Projectile]]
  - [[#magit][Magit]]
- [[#e-book][E-Book]]
  - [[#pdf-tools][Pdf Tools]]
  - [[#org-pdftools][Org Pdftools]]
  - [[#pdf-view-restore][Pdf View Restore]]
- [[#development][Development]]
  - [[#git][Git]]
    - [[#git-link][git-link]]
  - [[#docker][Docker]]
  - [[#languages][Languages]]
    - [[#cc][C/C++]]
      - [[#compiling-and-running-c-code][Compiling and running C++ Code]]
    - [[#go][Go]]
    - [[#java][Java]]
    - [[#rust][Rust]]
    - [[#python][Python]]
    - [[#markdown][Markdown]]
    - [[#html][HTML]]
      - [[#web-mode][Web Mode]]
      - [[#skewer][Skewer]]
      - [[#emmet][Emmet]]
    - [[#latex][LaTeX]]
    - [[#javascript][Javascript]]
    - [[#json][JSON]]
    - [[#scss][SCSS]]
    - [[#yaml][YAML]]
    - [[#solidity][Solidity]]
  - [[#highlight][Highlight]]
  - [[#regular-expression][Regular Expression]]
  - [[#format][Format]]
  - [[#compilation][Compilation]]
  - [[#productivity][Productivity]]
    - [[#syntax-checking-with-flycheck][Syntax checking with Flycheck]]
    - [[#snippets][Snippets]]
    - [[#rainbow-mode][Rainbow Mode]]
- [[#writing][Writing]]
  - [[#darkroom][Darkroom]]
  - [[#spell-checking][Spell Checking]]
  - [[#auto-complete][Auto Complete]]
  - [[#show-current-command-in-the-mode-line][Show Current Command in the Mode Line]]
- [[#dashboard][Dashboard]]
  - [[#page-break-lines][Page Break Lines]]
- [[#file-manager][File Manager]]
- [[#applications][Applications]]
  - [[#calendar][Calendar]]
  - [[#vterm][Vterm]]
  - [[#tracking][Tracking]]
  - [[#media][Media]]
    - [[#mpv][mpv]]
    - [[#emms][EMMS]]
  - [[#mail][Mail]]
- [[#org-mode][Org Mode]]
  - [[#org-presentation][Org presentation]]
  - [[#create-table-of-contents][Create Table of Contents]]
  - [[#org-todo-keywords][Org Todo Keywords]]
  - [[#enhancement][Enhancement]]
- [[#footer][Footer]]

* Header
#+BEGIN_SRC emacs-lisp
  ;;; init.el --- Emacs Rice

  ;;; Commentary:
  ;; My Emacs configuration in org mode

  ;;; Code:
#+END_SRC

* Startup Performance
Make startup faster by reducing the frequency of garbage collection and then use a hook to measure Emacs startup time.
The default is 800 kilobytes.  Measured in bytes.
#+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold (* 50 1000 1000))

  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "*** Emacs loaded in %s with %d garbage collections."
                       (format "%.2f seconds"
                               (float-time
                                (time-subtract after-init-time before-init-time))) gcs-done)))
#+END_SRC

* Package Manager
Initialize package sources
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))
  (package-initialize)

  (unless package-archive-contents
    (package-refresh-contents))

  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

      ;;; Install quelpa for external repo fetching
  (use-package quelpa-use-package
    :init (setq quelpa-update-melpa-p nil)
    :config (quelpa-use-package-activate-advice))
#+END_SRC

* Keep it Clean
I don't want a bunch of transient files showing up as untracked in the Git repo so I move them all to another location.
#+BEGIN_SRC emacs-lisp
  ;; Change the user-emacs-directory to keep unwanted things out of ~/.config/emacs
  (setq user-emacs-directory (expand-file-name "~/.cache/emacs/")
        url-history-file (expand-file-name "url/history" user-emacs-directory))

  ;; Use no-littering to automatically set common paths to the new user-emacs-directory
  (use-package no-littering)
#+END_SRC

If you're watching this channel, you're probably interested in writing your own Emacs configuration mostly by hand without using Emacs' customization UI. However, even if you avoid using the customization UI, some settings may cause customization variables to be added to your init.el file.

To avoid having Emacs place those variables into your hand-crafted configuration file, you can use this snippet:
#+BEGIN_SRC emacs-lisp
  (setq custom-file
        (if (boundp 'server-socket-dir)
            (expand-file-name "custom.el" server-socket-dir)
          (expand-file-name (format "emacs-custom-%s.el" (user-uid)) temporary-file-directory)))

  (load custom-file 'noerror 'nomessage)
#+END_SRC

* General Configuration
** User Interface
Clean up Emacs user interface, make it more minimal.
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (setq visible-bell t)

  (use-package beacon)
  (beacon-mode 1)

  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (set-fringe-mode 10)
  (menu-bar-mode -1)
  (global-hl-line-mode +1)
  (global-visual-line-mode 1)
  (blink-cursor-mode -1)
  (global-unset-key (kbd "C-z"))
#+END_SRC

Improve scrolling.
#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 101) ;; value greater than 100 gets rid of half page jumping
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
  (setq mouse-wheel-progressive-speed nil)
  (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
  (setq scroll-step 1) ;; keyboard scroll one line at a time
  (setq use-dialog-box nil) ;; Don't pop up UI dialogs when prompting
  (setq isearch-allow-scroll t)
  (setq undo-outer-limit 104857600) ;; set the size of output in bytes
#+END_SRC

# Set frame transparency and maximize windows by default.
# #+BEGIN_SRC emacs-lisp
#   (defun toggle-transparency ()
#     (interactive)
#     (let ((alpha (frame-parameter nil 'alpha)))
#       (set-frame-parameter
#        nil 'alpha
#        (if (eql (cond ((numberp alpha) alpha)
#                       ((numberp (cdr alpha)) (cdr alpha))
#                       ;; Also handle undocumented (<active> <inactive>) form.
#                       ((numberp (cadr alpha)) (cadr alpha)))
#                 100)
#            '(90 . 50) '(100 . 100)))))
#   (global-set-key (kbd "C-c t") 'toggle-transparency)

#   (set-frame-parameter (selected-frame) 'alpha '(100 . 100))
#   (add-to-list 'default-frame-alist '(alpha . (100 . 100)))
#   (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
#   (add-to-list 'default-frame-alist '(fullscreen . maximized))
# #+END_SRC

Enable line numbers and customize their format.
#+BEGIN_SRC emacs-lisp
  (global-display-line-numbers-mode t)
  (column-number-mode)
  (setq display-line-numbers-type 'relative)
  (use-package command-log-mode)

  (dolist (mode '(term-mode-hook
                  shell-mode-hook
                  eshell-mode-hook
                  vterm-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+END_SRC

Don’t warn for large files (shows up when launching videos)
#+BEGIN_SRC emacs-lisp
  (setq large-file-warning-threshold nil)
#+END_SRC

Don’t warn for following symbolically linked files
#+BEGIN_SRC emacs-lisp
  (setq vc-follow-symlinks t)
#+END_SRC

Don’t warn when advice is added for functions
#+BEGIN_SRC emacs-lisp
  (setq ad-redefinition-action 'accept)
#+END_SRC

** Theme
Rainbow Delimiters Mode
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :config
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
    (add-hook 'foo-mode-hook #'rainbow-delimiters-mode))
#+END_SRC

A nice gallery of Emacs themes can be found at https://emacsthemes.com/.
#+BEGIN_SRC emacs-lisp
  (use-package gruvbox-theme
    :ensure t
    :config
    (load-theme 'gruvbox-light-medium t))
#+END_SRC

** Font
*** Set the font
Different platforms need different default font sizes, and Fantasque Sans Mono is currently my favorite face.
#+BEGIN_SRC emacs-lisp
  ;; Set the font face based on platform
  (pcase system-type
    ((or 'gnu/linux 'windows-nt 'cygwin)
     (set-face-attribute 'default nil
                         :font "Fantasque Sans Mono"
                         :weight 'light
                         :height 110))
    ('darwin (set-face-attribute 'default nil :font "Fira Mono" :height 110)))

  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil
                      :font "Fantasque Sans Mono"
                      :weight 'light
                      :height 110)

  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil
                      ;; :font "Cantarell"
                      :font "Linux Biolinum"
                      :height 110
                      :weight 'light)
#+END_SRC


#+BEGIN_SRC emacs-lisp
                                          ; (set-fontset-font "fontset-default" 'arabic (font-spec :family "Janna LT" :height 110))
  (set-fontset-font "fontset-default" 'arabic (font-spec :family "Amiri Quran" :height 110))
#+END_SRC

#+RESULTS:

*** Emojis in buffers
Emojify is an Emacs extension to display emojis. It can display github style emojis like :smile: or plain ascii ones like :).
#+BEGIN_SRC emacs-lisp
  (use-package emojify
    :ensure t
    :hook
    (after-init . global-emojify-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :if (display-graphic-p))

  (use-package all-the-icons-completion)
  (all-the-icons-completion-mode)
#+END_SRC

** Mode Line
*** Basic Customization
#+BEGIN_SRC emacs-lisp
  (setq display-time-format "%l:%M %p %b %y"
        display-time-default-load-average nil)
#+END_SRC

*** Enable Mode Diminishing
The diminish package hides pesky minor modes from the modelines.
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t)
#+END_SRC

*** Doom Modeline
#+BEGIN_SRC emacs-lisp
  ;; You must run (all-the-icons-install-fonts) one time after
  ;; installing this package!

  (use-package minions
    :hook (doom-modeline-mode . minions-mode))

  (use-package doom-modeline
    :hook (after-init . doom-modeline-init)
    :custom-face
    (mode-line ((t (:height 0.90))))
    (mode-line-inactive ((t (:height 0.90))))
    :custom
    (doom-modeline-height 26)
    (doom-modeline-bar-width 6)
    (doom-modeline-github nil)

    ;; Whether display the mu4e notifications. It requires `mu4e-alert' package.
    (doom-modeline-mu4e t)
    ;; also enable the start of mu4e-alert
    (mu4e-alert-enable-mode-line-display)

    (doom-modeline-persp-name nil)
    (doom-modeline-buffer-file-name-style 'truncate-upto-project)

    ;; Whether to use hud instead of default bar. It's only respected in GUI.
    (doom-modeline-hud nil)

    ;; Whether display icons in the mode-line.
    ;; While using the server mode in GUI, should set the value explicitly.
    (doom-modeline-icon (display-graphic-p))

    ;; Whether display the indentation information.
    (doom-modeline-indent-info t)

    ;; The maximum displayed length of the branch name of version control.
    (setq doom-modeline-vcs-max-length 6)

    ;; Whether display the environment version.
    (setq doom-modeline-env-version t)

    ;; The limit of the window width.
    ;; If `window-width' is smaller than the limit, some information won't be displayed.
    (doom-modeline-window-width-limit fill-column)

    ;; If non-nil, a word count will be added to the selection-info modeline segment.
    (setq doom-modeline-enable-word-count t)

    ;; Whether display the modification icon for the buffer.
    ;; It respects `doom-modeline-icon' and `doom-modeline-buffer-state-icon'.
    (setq doom-modeline-buffer-modification-icon t)

    ;; Whether display the environment version.
    (doom-modeline-env-version t)
    (doom-modeline-major-mode-icon t)

    ;; Whether display the colorful icon for `major-mode'.
    ;; It respects `all-the-icons-color-icons'.
    (doom-modeline-major-mode-color-icon t)

    (doom-modeline-minor-modes t))

  (doom-modeline-mode 1)
#+END_SRC

** Notifications
alert is a great library for showing notifications from other packages in a variety of ways. For now I just use it to surface desktop notifications from package code.

#+BEGIN_SRC emacs-lisp
  (use-package alert
    :commands alert
    :config
    (setq alert-default-style 'notifications))
#+END_SRC

** Work spaces
#+BEGIN_SRC emacs-lisp
  (use-package perspective
    :demand t
    :bind (("C-M-k" . persp-switch)
           ("C-M-n" . persp-next)
           ("C-x k" . persp-kill-buffer*))
    :custom
    (persp-initial-frame-name "Main")
    :config
    ;; Running `persp-mode' multiple times resets the perspective list...
    (unless (equal persp-mode t)
      (persp-mode)))
#+END_SRC

** Highlight Matching Braces
#+BEGIN_SRC emacs-lisp
  (use-package paren
    :config
    (set-face-attribute 'show-paren-match-expression nil :background "#363e4a")
    (show-paren-mode 1))
  (electric-pair-mode 1) ;; إغلاق تلقائي للأقواس
#+END_SRC

** Displaying World Time
display-time-world command provides a nice display of the time at a specified list of timezones. Nice for working in a team with remote members.
#+BEGIN_SRC emacs-lisp
  (setq display-time-world-list
        '(("Etc/UTC" "UTC")
          ("America/Los_Angeles" "Seattle")
          ("Africa/Cairo" "Cairo")
          ("Europe/Athens" "Athens")
          ("Pacific/Auckland" "Auckland")
          ("Asia/Shanghai" "Shanghai")
          ("Asia/Kolkata" "Hyderabad")))
  (setq display-time-world-time-format "%a, %d %b %I:%M %p %Z")
#+END_SRC

** Pinentry
Emacs can be prompted for the PIN of GPG private keys, we just need to set epa-pinentry-mode to accomplish that:
#+BEGIN_SRC emacs-lisp
  (use-package pinentry
    :ensure t)

  (setq epa-pinentry-mode 'loopback)
  (pinentry-start)
#+END_SRC

** TRAMP
Set default connection mode to SSH
#+BEGIN_SRC emacs-lisp
  (setq tramp-default-method "ssh")
#+END_SRC

# ** PATH
# #+BEGIN_SRC emacs-lisp
#   (use-package exec-path-from-shell)
#   (when (memq window-system '(mac ns x))
#     (exec-path-from-shell-initialize))
# #+END_SRC

** Server
#+BEGIN_SRC emacs-lisp
  (server-mode 1)
#+END_SRC

* General Key Bindings
Family of short bindings with a common prefix - a Hydra.
#+BEGIN_SRC emacs-lisp
  (use-package hydra)
#+END_SRC

General keybindings helper
#+BEGIN_SRC emacs-lisp
  (use-package general
    :config
    (general-override-mode)
    (general-create-definer leader-spc
      :keymaps 'override
      :prefix "SPC"))
#+END_SRC

Global keybindings
#+BEGIN_SRC emacs-lisp
  ;; ESC Cancels All
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  (general-define-key
   :keymaps '(normal insert emacs)
   :prefix "SPC"
   :non-normal-prefix "M-SPC"
   "g" 'counsel-projectile-rg
   "t t" 'load-theme)
#+END_SRC

* Editing Configuration
** Tab Widths
Default to an indentation size of 2 spaces since it’s the norm for pretty much every language I use.
#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 2)
#+END_SRC

** Use Spaces instead of Tabs for Indentation
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC

** Automatically Clean Whitespace
#+BEGIN_SRC emacs-lisp
  (use-package ws-butler
    :hook ((text-mode . ws-butler-mode)
           (prog-mode . ws-butler-mode)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (delete-selection-mode +1)
#+END_SRC

** History
*** Remembering Recently Edited Files
When you do a lot of work with Emacs, you will probably want to get back to files you recently edited. Instead of using find-file to go hunt those files down again, you can enable recentf-mode to have Emacs remember the files you edited most recently:
#+BEGIN_SRC emacs-lisp
  (recentf-mode 1)
#+END_SRC

After enabling this mode, you can use the M-x recentf-open-files command to be shown a list of recent files which can be selected by typing the relevant number. This command isn't bound to a key by default, so I recommend doing that if you want to use it regularly!

*** Remembering Minibuffer Prompt History
One thing you will do a lot in Emacs is enter text into minibuffer prompts. Everything from M-x, isearch, the describe-* commands, and even the shell modes will receive a lot of input from you over time.

You'll quickly realize that it would be helpful for Emacs to remember the things you've entered into these prompts the next time you use them. That's where the savehist-mode comes in!

When you enable this mode, you will be able to use M-n (next-history-element) and M-p (previous-history-element) key bindings in almost every minibuffer (and shell) prompt to call up the inputs you used previously for the current command.

I also like to set the history-length to a reasonable number to reduce the impact that reading these history files can have on Emacs' startup performance.
#+BEGIN_SRC emacs-lisp
  ;; Save what you enter into minibuffer prompts
  (setq history-length 100)
  (savehist-mode 1)
#+END_SRC

*** Remembering The Last Place You Visited in a File
Sometimes it's convenient for Emacs to remember the last location you were at when you visited a particular file. The save-place-mode can help with that!
Once you turn on this mode, Emacs will drop your cursor to the last visited location in any file that you open.
#+BEGIN_SRC emacs-lisp
  ;; Remember and restore the last cursor location of opened files
  (save-place-mode 1)
#+END_SRC

** Auto-Saving Changed Files
#+BEGIN_SRC emacs-lisp
  (use-package super-save
    :defer 1
    :diminish super-save-mode
    :config
    (super-save-mode +1)
    (setq super-save-auto-save-when-idle t))
#+END_SRC

** Auto-Reverting Changed Files
#+BEGIN_SRC emacs-lisp
  ;; Revert Dired and other buffers
  (setq global-auto-revert-non-file-buffers t)

  ;; Revert buffers when the underlying file has changed
  (global-auto-revert-mode 1)
#+END_SRC

** Multiple Cursor
#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors)
  (global-set-key (kbd "C-M-x") 'mc/edit-lines)
  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
#+END_SRC

** Indentation
#+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent)
  (add-hook 'css-mode-hook #'aggressive-indent-mode)
#+END_SRC

You can use this hook on any mode you want, aggressive-indent is not exclusive to emacs-lisp code. In fact, if you want to turn it on for every programming mode, you can do something like:
#+BEGIN_SRC emacs-lisp
  (global-aggressive-indent-mode 1)
  (add-to-list 'aggressive-indent-excluded-modes 'html-mode)
#+END_SRC

** Undo Tree
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :init
    (global-undo-tree-mode)
    :config
    ;; (setq undo-tree-auto-save-history 1) ;; you can turn this on
    ;; Each node in the undo tree should have a timestamp.
    (setq undo-tree-visualizer-timestamps t)
    ;; Show a diff window displaying changes between undo nodes.
    (setq undo-tree-visualizer-diff t))

  (define-key global-map (kbd "C-/") 'undo)
  (define-key global-map (kbd "C-x C-/") 'redo)
#+END_SRC

* Completion System
** Completions in Regions with Corfu
#+BEGIN_SRC emacs-lisp
  (use-package corfu
    :bind (:map corfu-map
                ("C-j" . corfu-next)
                ("C-k" . corfu-previous)
                ("C-f" . corfu-insert))
    :custom
    (corfu-cycle t)
    :config
    (corfu-global-mode))
#+END_SRC

** Improved Candidate Filtering with Orderless
#+BEGIN_SRC emacs-lisp
  (use-package orderless
    :init
    (setq completion-styles '(orderless)
          completion-category-defaults nil
          completion-category-overrides '((file (styles . (partial-completion))))))
#+END_SRC

* Jumping with Avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :commands (avy-goto-char avy-goto-word-0 avy-goto-line))

  (general-define-key
   :keymap '(normal emacs)
   :prefix "C-c"
   :properties '(:repeat t :jump t)
   :non-normal-prefix "M-SPC"
   "c" 'avy-goto-char
   "l" 'avy-goto-line
   "w" 'avy-goto-word-0)
#+END_SRC

* Search with Ivy
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

  (use-package ivy-rich
    :ensure t
    :init
    (ivy-rich-mode 1))

  (use-package counsel
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-ibuffer)
           ("C-x C-f" . counsel-find-file)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (require 'find-func)
  ;; Enable bookmarks and recentf
  (setq ivy-use-virtual-buffers t)

  ;; Example setting for ivy-views
  (setq ivy-views
        `(("dutch + notes {}"
           (vert
            (file "dutch.org")
            (buffer "notes")))
          ("ivy.el {}"
           (horz
            (file ,(find-library-name "ivy"))
            (buffer "*scratch*")))))
  (global-set-key (kbd "C-c v") 'ivy-push-view)
  (global-set-key (kbd "C-c V") 'ivy-pop-view)
  (setq desktop-save-mode 1)
#+END_SRC

** Making M-x Great Again!
The following line removes the annoying in things like counsel-M-x and other ivy/counsel prompts. The default string means that if you type something immediately after this string only completion candidates that begin with what you typed are shown. Most of the time, I'm searching for a command without knowing what it begins with though.
#+BEGIN_SRC emacs-lisp
  (setq ivy-initial-inputs-alist nil)
#+END_SRC

Smex is a package the makes M-x remember our history.  Now M-x will show our last used commands first.
#+BEGIN_SRC emacs-lisp
  (use-package smex)
  (smex-initialize)
#+END_SRC

* Functional Environment
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 1))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

  ;;If you want to replace the default Emacs help keybindings, you can do so:
  ;; Note that the built-in `describe-function' includes both functions
  ;; and macros. `helpful-function' is functions only, so we provide
  ;; `helpful-callable' as a drop-in replacement.
  (global-set-key (kbd "C-h f") #'helpful-callable)
  (global-set-key (kbd "C-h v") #'helpful-variable)
  (global-set-key (kbd "C-h k") #'helpful-key)
#+END_SRC

* Buffer Management
Bufler is an excellent package by alphapapa which enables you to automatically group all of your Emacs buffers into workspaces by defining a series of grouping rules. Once you have your groups defined (or use the default configuration which is quite good already), you can use the bufler-workspace-frame-set command to focus your current Emacs frame on a particular workspace so that bufler-switch-buffer will only show buffers from that workspace. In my case, this allows me to dedicate an EXWM workspace to a specific Bufler workspace so that only see the buffers I care about in that EXWM workspace.
#+BEGIN_SRC emacs-lisp
  (use-package bufler
    :bind (("C-M-j" . bufler-switch-buffer)
           ("C-M-k" . bufler-workspace-frame-set))
    :config
    (setf bufler-groups
          (bufler-defgroups
            ;; Subgroup collecting all named workspaces.
            (group (auto-workspace))
            ;; Subgroup collecting buffers in a projectile project.
            (group (auto-projectile))
            ;; Grouping browser windows
            (group
             (group-or "Browsers"
                       (name-match "Vimb" (rx bos "vimb"))
                       (name-match "Qutebrowser" (rx bos "Qutebrowser"))
                       (name-match "Chromium" (rx bos "Chromium"))))
            (group
             (group-or "Chat"
                       (mode-match "Telega" (rx bos "telega-"))))
            (group
             ;; Subgroup collecting all `help-mode' and `info-mode' buffers.
             (group-or "Help/Info"
                       (mode-match "*Help*" (rx bos (or "help-" "helpful-")))
                       ;; (mode-match "*Helpful*" (rx bos "helpful-"))
                       (mode-match "*Info*" (rx bos "info-"))))
            (group
             ;; Subgroup collecting all special buffers (i.e. ones that are not
             ;; file-backed), except `magit-status-mode' buffers (which are allowed to fall
             ;; through to other groups, so they end up grouped with their project buffers).
             (group-and "*Special*"
                        (name-match "**Special**"
                                    (rx bos "*" (or "Messages" "Warnings" "scratch" "Backtrace" "Pinentry") "*"))
                        (lambda (buffer)
                          (unless (or (funcall (mode-match "Magit" (rx bos "magit-status"))
                                               buffer)
                                      (funcall (mode-match "Dired" (rx bos "dired"))
                                               buffer)
                                      (funcall (auto-file) buffer))
                            "*Special*"))))
            ;; Group remaining buffers by major mode.
            (auto-mode))))
#+END_SRC

* Window Management
** Frame Scaling / Zooming
The keybindings for this are C+M+- and C+M+=.
#+BEGIN_SRC emacs-lisp
  (use-package default-text-scale
    :defer 1
    :config
    (default-text-scale-mode))
#+END_SRC

** Window Selection with Ace Window
ace-window helps with easily switching between windows based on a predefined set of keys used to identify each.
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :bind (("M-o" . ace-window))
    :custom
    (aw-scope 'frame)
    (aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
    (aw-minibuffer-flag t)
    :config
    (ace-window-display-mode 1))
#+END_SRC

** Window History with Winner Mode
#+BEGIN_SRC emacs-lisp
  (use-package winner
    :config
    (winner-mode))
#+END_SRC

** Control Buffer Placement
Emacs’ default buffer placement algorithm is pretty disruptive if you like setting up window layouts a certain way in your workflow. The display-buffer-alist variable controls this behavior and you can customize it to prevent Emacs from popping up new windows when you run commands.

#+BEGIN_SRC emacs-lisp
  ;; (setq display-buffer-base-action
  ;;       '(display-buffer-reuse-mode-window
  ;;         display-buffer-reuse-window
  ;;         display-buffer-same-window))

  ;; If a popup does happen, don't resize windows to be equal-sized
  (setq even-window-sizes nil)
#+END_SRC

* Credential Management
I use pass to manage all of my passwords locally. I also use auth-source-pass as the primary auth-source provider so that all passwords are stored in a single place.
#+BEGIN_SRC emacs-lisp
  (use-package password-store
    :config
    (setq password-store-password-length 12))

  (use-package auth-source-pass
    :config
    (auth-source-pass-enable))

  (use-package password-store-otp)

  (use-package oauth2)
#+END_SRC

The variable auth-sources controls how and where Auth-Source keeps its secrets. The default value is a list of three files: ("~/.authinfo" "~/.authinfo.gpg" "~/.netrc"), but to avoid confusion you should make sure that only one of these files exists and then you should also adjust the value of the variable to only ever use that file,
#+BEGIN_SRC emacs-lisp
  (setq auth-sources '("~/.authinfo.gpg"))
#+END_SRC

* Project Management
** Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :demand t
    :custom ((projectile-completion-system 'ivy))
    :bind ("C-M-p" . projectile-find-file)
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    (when (file-directory-p "~/.local/src")
      (setq projectile-project-search-path '("~/.local/src")))
    (setq projectile-switch-project-action #'projectile-dired))
#+END_SRC

** Counsel Projectile
The counsel-projectile-rg command
Default key binding: C-c p s r.

This command is a replacement for projectile-ripgrep. It is similar to counsel-projectile-grep (see above) but uses rg (ripgrep) instead of grep.

/Search in files and folders using C-c p s r./
*C-c C-o to pups up the result list into a separate buffer.*
#+BEGIN_SRC emacs-lisp
  (use-package counsel-projectile
    :after projectile
    :config (counsel-projectile-mode))
#+END_SRC

** Magit
NOTE: Make sure to configure a GitHub token before using this package!
[[https://magit.vc/manual/forge/Token-Creation.html#Token-Creation][Token Creation]]
[[https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started][Getting Started]]
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  (global-set-key (kbd "C-x g") 'magit)

  (use-package forge
    :ensure t)
#+END_SRC

This is an interesting extension to Magit that shows a TODOs section in your git status buffer containing all lines with TODO (or other similar words) in files contained within the repo. More information at the GitHub repo.
#+BEGIN_SRC emacs-lisp
  (use-package magit-todos
    :defer t)
#+END_SRC

* E-Book
** Pdf Tools
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :config
    ;; (pdf-tools-install)
    (pdf-loader-install)
    (setq-default pdf-view-display-size 'fit-width)
    (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)
    (define-key pdf-view-mode-map (kbd "C-r") 'isearch-backward)
    (setq pdf-misc-print-programm "/usr/bin/lp")
    (setq-default pdf-view-display-size (quote fit-page))
    (setq pdf-view-incompatible-modes
          (quote
           (linum-relative-mode helm-linum-relative-mode nlinum-mode nlinum-hl-mode nlinum-relative-mode yalinum-mode)))
    :custom
    (pdf-annot-activate-created-annotations t "automatically annotate highlights"))

  (setq  lpr-command "lp"
         lpr-printer-switch "-d"
         lpr-switches (quote ("-o fit-to-page=true" "-o sides=two-sided-long-edge" "-o Resolution=600" "-n 1 -o page-ranges=1-"))
         )

  (setq thumbs-conversion-program "/usr/bin/convert")
  (setq ps-print-header nil)

  (add-hook 'image-mode-hook
            (lambda ()
              (auto-revert-mode)
              (auto-image-file-mode)))
#+END_SRC

#+RESULTS:

Make pdf-tools a pdf default:
#+BEGIN_SRC emacs-lisp
  (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
        TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view))
        TeX-source-correlate-start-server t)

  (add-hook 'TeX-after-compilation-finished-functions
            #'TeX-revert-document-buffer)
#+END_SRC

** Org Pdftools
#+begin_src emacs-lisp
  (use-package org-noter)

  (use-package org-pdftools
    :hook (org-mode . org-pdftools-setup-link))

  (use-package org-noter-pdftools
    :after org-noter)

  ;; (use-package org-pdfview)
#+end_src

** Pdf View Restore
Support for opening last known pdf position in pdf-view-mode provided by pdf-tools.
#+begin_src emacs-lisp
  (use-package pdf-view-restore
    :after pdf-toos
    :config
    (add-hook 'pdf-view-mode-hook 'pdf-view-restore-mode))
  (setq pdf-view-restore-filename "~/.cache/emacs/.pdf-view-restore")
#+end_src

* Development
Configuration for various programming languages and dev tools that I use.
** Git
*** git-link
#+BEGIN_SRC emacs-lisp
  (use-package git-link
    :commands git-link
    :config
    (setq git-link-open-in-browser t))

  ;;Functions can be called interactively (M-x git-link) or via a key binding of your choice. For example:
  (global-set-key (kbd "C-c g l") 'git-link)
#+END_SRC

** Docker
#+BEGIN_SRC emacs-lisp
  (use-package docker
    :ensure t
    :bind ("C-c d" . docker))

  (use-package dockerfile-mode)
  (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode))
  (use-package docker-compose-mode)
#+END_SRC

** Languages
*** C/C++
Emacs frontend to GNU Global source code tagging system.
#+BEGIN_SRC emacs-lisp
  (use-package ggtags
    :ensure t
    :config
    (add-hook 'c-mode-common-hook
              (lambda ()
                (when (derived-mode-p 'c-mode 'c++-mode 'java-mode 'asm-mode)
                  (ggtags-mode 1)))))

  (define-key ggtags-mode-map (kbd "C-c g s") 'ggtags-find-other-symbol)
  (define-key ggtags-mode-map (kbd "C-c g h") 'ggtags-view-tag-history)
  (define-key ggtags-mode-map (kbd "C-c g r") 'ggtags-find-reference)
  (define-key ggtags-mode-map (kbd "C-c g f") 'ggtags-find-file)
  (define-key ggtags-mode-map (kbd "C-c g c") 'ggtags-create-tags)
  (define-key ggtags-mode-map (kbd "C-c g u") 'ggtags-update-tags)

  (define-key ggtags-mode-map (kbd "M-,") 'pop-tag-mark)
#+END_SRC

Provides syntax highlight of the latest C++ language.
#+BEGIN_SRC emacs-lisp
  (use-package modern-cpp-font-lock
    :ensure t)
#+END_SRC

**** Compiling and running C++ Code
#+BEGIN_SRC emacs-lisp
  (defun code-compile ()
    (interactive)
    (unless (file-exists-p "Makefile")
      (set (make-local-variable 'compile-command)
           (let ((file (file-name-nondirectory buffer-file-name)))
             (format "%s -o %s %s"
                     (if  (equal (file-name-extension file) "cpp") "g++" "gcc" )
                     (file-name-sans-extension file)
                     file)))
      (compile compile-command)))

  (global-set-key [f9] 'code-compile)
#+END_SRC

*** Go
#+BEGIN_SRC emacs-lisp
  (use-package go-mode)
#+END_SRC

*** Java
#+BEGIN_SRC emacs-lisp
  (use-package autodisass-java-bytecode)
#+END_SRC

*** Rust
#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
    :mode "\\.rs\\'"
    :init (setq rust-format-on-save t))

  (use-package cargo
    :defer t)
#+END_SRC

*** Python
Elpy is available on Melpa, the most straightforward way to install it is to use use-package:
#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :ensure t
    :init
    (elpy-enable))
#+END_SRC

*** Markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :mode "\\.md\\'"
    :config
    (setq markdown-command "marked")
    (defun amf/set-markdown-header-font-sizes ()
      (dolist (face '((markdown-header-face-1 . 1.8)
                      (markdown-header-face-2 . 1.6)
                      (markdown-header-face-3 . 1.4)
                      (markdown-header-face-4 . 1.2)
                      (markdown-header-face-5 . 1.0)))
        (set-face-attribute (car face) nil :weight 'normal :height (cdr face)))))
#+END_SRC

*** HTML
**** Web Mode
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :config
    (setq-default web-mode-code-indent-offset 2)
    (setq-default web-mode-markup-indent-offset 2)
    (setq-default web-mode-attribute-indent-offset 2)
    (setq-default web-mode-enable-current-element-highlight t)
    (setq-default web-mode-enable-current-column-highlight t))

  (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.tsx?\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.jsx?\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.json\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.css\\'" . web-mode))

  (setq web-mode-content-types-alist
        '(("jsx" . "\\.jsx?\\'")
          ("tsx" . "\\.tsx?\\'")
          ("json" . "\\.json\\'")))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold (* 100 1024 1024)
        read-process-output-max (* 1024 1024)
        create-lockfiles nil) ;; lock files will kill `npm start'
#+END_SRC

**** Skewer
#+BEGIN_SRC emacs-lisp
  (use-package skewer-mode)
#+END_SRC

**** Emmet
#+BEGIN_SRC emacs-lisp
  (use-package emmet-mode
    :init
    (emmet-mode t))

  (add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
  (add-hook 'css-mode-hook  'emmet-mode) ;; enable Emmet's css abbreviation.

  (add-hook 'emmet-mode-hook (lambda () (setq emmet-indent-after-insert nil)))

  ;; If you disable indent-region, you can set the default indent level thusly:
  (add-hook 'emmet-mode-hook (lambda () (setq emmet-indentation 2))) ;; indent 2 spaces.

  (setq emmet-move-cursor-between-quotes t) ;; default nil

  ;; To enable the JSX support, add your major-mode to emmet-jsx-major-modes:
  (add-to-list 'emmet-jsx-major-modes 'your-jsx-major-mode)

  ;; Enable emmet-mode with web-mode
  (add-hook 'web-mode-hook  'emmet-mode)

  (general-define-key
   :keymaps '(normal emacs)
   :prefix "SPC"
   :non-normal-prefix "M-SPC"
   "w" 'emmet-wrap-wait-markup)
#+END_SRC

*** LaTeX
By using M-x TeX-command-master (or C-c C-c), you can use LatexMk command to compile TeX source.
If you would like LatexMk to pass the -pdf flag when TeX-PDF-mode is active add
#+BEGIN_SRC emacs-lisp
  (use-package auctex-latexmk
    :config
    (auctex-latexmk-setup)
    (setq auctex-latexmk-inherit-TeX-PDF-mode t))

  ;; Customary Customization, p. 1 and 16 in the manual, and http://www.emacswiki.org/emacs/AUCTeX#toc2
  (setq TeX-parse-self t); Enable parse on load.
  (setq TeX-auto-save t); Enable parse on save.
  (setq-default TeX-master nil)

  (setq TeX-PDF-mode t); PDF mode (rather than DVI-mode)

  (add-hook 'TeX-mode-hook 'flyspell-mode); Enable Flyspell mode for TeX modes such as AUCTeX. Highlights all misspelled words.
  (add-hook 'emacs-lisp-mode-hook 'flyspell-prog-mode); Enable Flyspell program mode for emacs lisp mode, which highlights all misspelled words in comments and strings.
  (setq ispell-dictionary "english"); Default dictionary. To change do M-x ispell-change-dictionary RET.
  (add-hook 'TeX-mode-hook
            (lambda () (TeX-fold-mode 1))); Automatically activate TeX-fold-mode.
  (setq LaTeX-babel-hyphen nil); Disable language-specific hyphen insertion.

  ;; " expands into csquotes macros (for this to work babel must be loaded after csquotes).
  (setq LaTeX-csquotes-close-quote "}"
        LaTeX-csquotes-open-quote "\\enquote{")

  ;; LaTeX-math-mode http://www.gnu.org/s/auctex/manual/auctex/Mathematics.html
  (add-hook 'TeX-mode-hook 'LaTeX-math-mode)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package reftex
    :defer t
    :config
    (setq reftex-cite-prompt-optional-args t)) ;; Prompt for empty optional arguments in cite
  ;; Turn on RefTeX for AUCTeX http://www.gnu.org/s/auctex/manual/reftex/reftex_5.html
  (add-hook 'TeX-mode-hook 'turn-on-reftex)

  (eval-after-load 'reftex-vars; Is this construct really needed?
    '(progn
       (setq reftex-cite-prompt-optional-args t); Prompt for empty optional arguments in cite macros.
       ;; Make RefTeX interact with AUCTeX, http://www.gnu.org/s/auctex/manual/reftex/AUCTeX_002dRefTeX-Interface.html
       (setq reftex-plug-into-AUCTeX t)
       ;; So that RefTeX also recognizes \addbibresource. Note that you
       ;; can't use $HOME in path for \addbibresource but that "~"
       ;; works.
       (setq reftex-bibliography-commands '("bibliography" "nobibliography" "addbibresource"))
                                          ;     (setq reftex-default-bibliography '("UNCOMMENT LINE AND INSERT PATH TO YOUR BIBLIOGRAPHY HERE")); So that RefTeX in Org-mode knows bibliography
       (setcdr (assoc 'caption reftex-default-context-regexps) "\\\\\\(rot\\|sub\\)?caption\\*?[[{]"); Recognize \subcaptions, e.g. reftex-citation
       (setq reftex-cite-format; Get ReTeX with biblatex, see https://tex.stackexchange.com/questions/31966/setting-up-reftex-with-biblatex-citation-commands/31992#31992
             '((?t . "\\textcite[]{%l}")
               (?a . "\\autocite[]{%l}")
               (?c . "\\cite[]{%l}")
               (?s . "\\smartcite[]{%l}")
               (?f . "\\footcite[]{%l}")
               (?n . "\\nocite{%l}")
               (?b . "\\blockcquote[]{%l}{}")))))

  ;; Fontification (remove unnecessary entries as you notice them) http://lists.gnu.org/archive/html/emacs-orgmode/2009-05/msg00236.html http://www.gnu.org/software/auctex/manual/auctex/Fontification-of-macros.html
  (setq font-latex-match-reference-keywords
        '(
          ;; biblatex
          ("printbibliography" "[{")
          ("addbibresource" "[{")
          ;; Standard commands
          ;; ("cite" "[{")
          ("Cite" "[{")
          ("parencite" "[{")
          ("Parencite" "[{")
          ("footcite" "[{")
          ("footcitetext" "[{")
          ;; ;; Style-specific commands
          ("textcite" "[{")
          ("Textcite" "[{")
          ("smartcite" "[{")
          ("Smartcite" "[{")
          ("cite*" "[{")
          ("parencite*" "[{")
          ("supercite" "[{")
                                          ; Qualified citation lists
          ("cites" "[{")
          ("Cites" "[{")
          ("parencites" "[{")
          ("Parencites" "[{")
          ("footcites" "[{")
          ("footcitetexts" "[{")
          ("smartcites" "[{")
          ("Smartcites" "[{")
          ("textcites" "[{")
          ("Textcites" "[{")
          ("supercites" "[{")
          ;; Style-independent commands
          ("autocite" "[{")
          ("Autocite" "[{")
          ("autocite*" "[{")
          ("Autocite*" "[{")
          ("autocites" "[{")
          ("Autocites" "[{")
          ;; Text commands
          ("citeauthor" "[{")
          ("Citeauthor" "[{")
          ("citetitle" "[{")
          ("citetitle*" "[{")
          ("citeyear" "[{")
          ("citedate" "[{")
          ("citeurl" "[{")
          ;; Special commands
          ("fullcite" "[{")))

  (setq font-latex-match-textual-keywords
        '(
          ;; biblatex brackets
          ("parentext" "{")
          ("brackettext" "{")
          ("hybridblockquote" "[{")
          ;; Auxiliary Commands
          ("textelp" "{")
          ("textelp*" "{")
          ("textins" "{")
          ("textins*" "{")
          ;; supcaption
          ("subcaption" "[{")))

  (setq font-latex-match-variable-keywords
        '(
          ;; amsmath
          ("numberwithin" "{")
          ;; enumitem
          ("setlist" "[{")
          ("setlist*" "[{")
          ("newlist" "{")
          ("renewlist" "{")
          ("setlistdepth" "{")
          ("restartlist" "{")))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package auto-dictionary
    :init(add-hook 'flyspell-mode-hook (lambda () (auto-dictionary-mode 1))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package company-math)
  ;; global activation of the unicode symbol completion
  (add-to-list 'company-backends 'company-math-symbols-unicode)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package company-auctex
    :init (company-auctex-init))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package tex
    :ensure auctex
    :mode ("\\.tex\\'" . latex-mode)
    :config (progn
              (setq TeX-source-correlate-mode t)
              (setq TeX-source-correlate-method 'synctex)
              (setq TeX-auto-save t)
              (setq TeX-parse-self t)
                                          ; (setq-default TeX-master "paper.tex")
              (setq reftex-plug-into-AUCTeX t)
              (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
                    TeX-source-correlate-start-server t)
              ;; Update PDF buffers after successful LaTeX runs
              (add-hook 'TeX-after-compilation-finished-functions
                        #'TeX-revert-document-buffer)
              (add-hook 'LaTeX-mode-hook
                        (lambda ()
                          (reftex-mode t)
                          (flyspell-mode t)))
              ))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package latex-preview-pane)

  ;; Refresh Preview (bound to M-p)
  ;; Open in External Program (Bound to M-P)
  (latex-preview-pane-enable)
#+END_SRC

*** Javascript
#+BEGIN_SRC emacs-lisp
  (use-package indium)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package js2-mode)
  (use-package js2-refactor)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package prettier-js)

  (add-hook 'js2-mode-hook 'prettier-js-mode)
  (add-hook 'web-mode-hook 'prettier-js-mode)
#+END_SRC

*** JSON
#+BEGIN_SRC emacs-lisp
  (use-package json-mode)
#+END_SRC

*** SCSS
#+BEGIN_SRC emacs-lisp
  (use-package scss-mode
    :mode ("\\.scss\\'" . scss-mode)
    :config (setq css-indent-offset 2))
  (add-to-list 'auto-mode-alist '("\\.scss\\'" . scss-mode))
#+END_SRC

*** YAML
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :mode "\\.ya?ml\\'")
#+END_SRC

*** Solidity
#+BEGIN_SRC emacs-lisp
  (use-package solidity-mode)
#+END_SRC

** Highlight
#+BEGIN_SRC emacs-lisp
  (use-package color-identifiers-mode)
  (add-hook 'after-init-hook 'global-color-identifiers-mode)

  ;; To make the variables stand out, you can turn off highlighting for all other keywords in supported modes using a code like:
  (defun myfunc-color-identifiers-mode-hook ()
    (let ((faces '(font-lock-comment-face font-lock-comment-delimiter-face font-lock-constant-face font-lock-type-face font-lock-function-name-face font-lock-variable-name-face font-lock-keyword-face font-lock-string-face font-lock-builtin-face font-lock-preprocessor-face font-lock-warning-face font-lock-doc-face font-lock-negation-char-face font-lock-regexp-grouping-construct font-lock-regexp-grouping-backslash)))
      (dolist (face faces)
        (face-remap-add-relative face '((:foreground "" :weight normal :slant normal)))))
    (face-remap-add-relative 'font-lock-keyword-face '((:weight bold)))
    (face-remap-add-relative 'font-lock-comment-face '((:slant italic)))
    (face-remap-add-relative 'font-lock-builtin-face '((:weight bold)))
    (face-remap-add-relative 'font-lock-preprocessor-face '((:weight bold)))
    (face-remap-add-relative 'font-lock-function-name-face '((:slant italic)))
    (face-remap-add-relative 'font-lock-string-face '((:slant italic)))
    (face-remap-add-relative 'font-lock-constant-face '((:weight bold))))
  (add-hook 'color-identifiers-mode-hook 'myfunc-color-identifiers-mode-hook)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package symbol-overlay)
  (global-set-key (kbd "M-i") 'symbol-overlay-put)
  (global-set-key (kbd "M-n") 'symbol-overlay-switch-forward)
  (global-set-key (kbd "M-p") 'symbol-overlay-switch-backward)
  (global-set-key (kbd "<f7>") 'symbol-overlay-mode)
  (global-set-key (kbd "<f8>") 'symbol-overlay-remove-all)
#+END_SRC

** Regular Expression
#+BEGIN_SRC emacs-lisp
  (use-package visual-regexp)
  (define-key global-map (kbd "C-c r") 'vr/replace)
  (define-key global-map (kbd "C-c q") 'vr/query-replace)
  ;; if you use multiple-cursors, this is for you:
  (define-key global-map (kbd "C-c m") 'vr/mc-mark)
#+END_SRC

** Format
#+BEGIN_SRC emacs-lisp
  (use-package format-all)
  (add-hook 'prog-mode-hook 'format-all-mode)
  (setq format-all-show-errors 'errors)
#+END_SRC

** Compilation
Set up the compile package and ensure that compilation output automatically scrolls.
#+BEGIN_SRC emacs-lisp
  (use-package compile
    :custom
    (compilation-scroll-output t))

  (defun auto-recompile-buffer ()
    (interactive)
    (if (member #'recompile after-save-hook)
        (remove-hook 'after-save-hook #'recompile t)
      (add-hook 'after-save-hook #'recompile nil t)))
#+END_SRC

** Productivity
*** Syntax checking with Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :init (global-flycheck-mode))

  (add-hook 'after-init-hook #'global-flycheck-mode)
#+END_SRC

*** Snippets
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :hook (prog-mode . yas-minor-mode)
    :config
    (yas-reload-all))
#+END_SRC

*** Rainbow Mode
Sets the background of HTML color strings in buffers to be the color mentioned.
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :defer t
    :hook (org-mode
           emacs-lisp-mode
           web-mode
           typescript-mode
           js2-mode))
#+END_SRC

* Writing
** Darkroom
#+BEGIN_SRC emacs-lisp
  (use-package darkroom
    :commands darkroom-mode
    :config
    (setq darkroom-text-scale-increase 0))

  (defun amf/enter-focus-mode ()
    (interactive)
    (darkroom-mode 1)
    (display-line-numbers-mode 0))

  (defun amf/leave-focus-mode ()
    (interactive)
    (darkroom-mode 0)
    (display-line-numbers-mode 1))

  (defun amf/toggle-focus-mode ()
    (interactive)
    (if (symbol-value darkroom-mode)
        (amf/leave-focus-mode)
      (amf/enter-focus-mode)))
#+END_SRC

** Spell Checking
#+BEGIN_SRC emacs-lisp
  (use-package flyspell-correct
    :ensure t
    :config
    ;; set ivy as correcting interface
    (define-key flyspell-mode-map (kbd "C-;") 'flyspell-correct-wrapper))

  (use-package flyspell-correct-ivy
    :ensure t)

  (use-package flymake)
  (setq ispell-program-name "aspell") ; could be ispell as well, depending on your preferences
  (setq ispell-dictionary "american") ; this can obviously be set to any language your spell-checking program supports

  (add-hook 'text-mode-hook #'flyspell-mode)
#+END_SRC

** Auto Complete
#+BEGIN_SRC emacs-lisp
  (use-package company
    :init
    (company-mode t)
    :config
    (setq company-idle-delay 0.0)
    (setq company-minimum-prefix-length 1))
  (add-hook 'after-init-hook 'global-company-mode)
#+END_SRC

** Show Current Command in the Mode Line
keycast-mode displays the command and event in the mode-line and keycast-log-mode displays them in a dedicated frame.
#+BEGIN_SRC emacs-lisp
  (use-package keycast)
#+END_SRC

* Dashboard
Emacs dashboard is an extensible startup screen showing you recent files, bookmarks, agenda items and an emacs banner.
configuring dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :init      ;; tweak dashboard config before loading it
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-banner-logo-title "While any text editor can save your files, only Emacs can save your soul")
    (setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
    ;; (setq dashboard-startup-banner "~/.config/emacs/images/RMS.png")  ;; use custom image as banner
    (setq dashboard-center-content nil) ;; set to 't' for centered content
    (setq dashboard-items '((recents . 4)
                            (agenda . 3 )
                            (bookmarks . 3)
                            (projects . 3)
                            (registers . 3)))
    :config
    (dashboard-setup-startup-hook)
    (dashboard-modify-heading-icons '((recents . "file-text")
                                      (bookmarks . "book"))))
  (dashboard-return)
#+END_SRC

dashboard in emacsclient
this setting ensures that emacsclient always opens on dashboard rather than scratch.
#+BEGIN_SRC emacs-lisp
  (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
#+END_SRC

** Page Break Lines
#+begin_src emacs-lisp
  (use-package page-break-lines)
#+end_src

* File Manager
#+begin_src emacs-lisp
  (use-package all-the-icons-dired)
  (use-package dired-open)
  (use-package peep-dired)

  (with-eval-after-load 'dired
    ;; Get file icons in dired
    (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
    ;; With dired-open plugin, you can launch external programs for certain extensions
    ;; For example, I set all .png files to open in 'sxiv' and all .mp4 files to open in 'mpv'
    (setq dired-open-extensions '(("gif" . "sxiv")
                                  ("jpg" . "sxiv")
                                  ("png" . "sxiv")
                                  ("mkv" . "mpv")
                                  ("mp4" . "mpv"))))
#+end_src

* Applications
** Calendar
calfw is a gorgeous calendar UI that is able to show all of my scheduled Org Agenda items.
#+BEGIN_SRC emacs-lisp
  (use-package calfw
    :commands cfw:open-org-calendar
    :config
    (setq cfw:fchar-junction ?╋
          cfw:fchar-vertical-line ?┃
          cfw:fchar-horizontal-line ?━
          cfw:fchar-left-junction ?┣
          cfw:fchar-right-junction ?┫
          cfw:fchar-top-junction ?┯
          cfw:fchar-top-left-corner ?┏
          cfw:fchar-top-right-corner ?┓)
    (use-package calfw-org
      :config
      (setq cfw:org-agenda-schedule-args '(:timestamp))))
#+END_SRC

** Vterm
vterm enables the use of fully-fledged terminal applications within Emacs so that I don’t need an external terminal emulator.
#+BEGIN_SRC emacs-lisp
  (use-package vterm
    :load-path  "~/.config/emacs/site-lisp/emacs-libvterm"
    :commands vterm
    :config
    (setq vterm-max-scrollback 1000000))
#+END_SRC

** Tracking
#+BEGIN_SRC emacs-lisp
  (use-package tracking
    :defer t
    :config
    (setq tracking-faces-priorities '(all-the-icons-pink
                                      all-the-icons-lgreen
                                      all-the-icons-lblue))
    (setq tracking-frame-behavior nil))
#+END_SRC

** Media
*** mpv
#+BEGIN_SRC emacs-lisp
  (use-package mpv)
#+END_SRC

*** EMMS
#+BEGIN_SRC emacs-lisp
  (use-package emms
    :commands emms
    :config
    (require 'emms-setup)
    (emms-standard)
    (emms-default-players)
    (emms-mode-line-disable)
    (setq emms-source-file-default-directory "/mnt/entertainment/music"))
#+END_SRC

** Mail

#+BEGIN_SRC emacs-lisp
  (load-file "~/.config/emacs/email.el")
#+END_SRC


#+BEGIN_SRC emacs-lisp
  (use-package mu4e-marker-icons
    :init (mu4e-marker-icons-mode 1))
#+END_SRC

Use [[https://github.com/iqbalansari/mu4e-alert][mu4e-alert]] to show notifications when e-mail comes in:
#+BEGIN_SRC emacs-lisp
  (use-package mu4e-alert
    :hook ((after-init . mu4e-alert-enable-notifications)
           (after-init . mu4e-alert-enable-mode-line-display)))

  (mu4e-alert-set-default-style 'libnotify)
  (setq mu4e-alert-email-notification-types '(count))
#+END_SRC

* Org Mode
#+BEGIN_SRC emacs-lisp
  (defun amf/org-mode-setup ()
    (org-indent-mode)
    (visual-line-mode 1))

  (defun amf/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•")))))))

  (with-eval-after-load 'org-faces
    ;; Increase the size of various headings
    (set-face-attribute 'org-document-title nil :font "Fantasque Sans Mono" :weight 'bold :height 1.5)
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.18)
                    (org-level-3 . 1.16)
                    (org-level-4 . 1.14)
                    (org-level-5 . 1.12)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.0)
                    (org-level-8 . 1.0)))
      (set-face-attribute (car face) nil :font "Fantasque Sans Mono" :weight 'regular :height (cdr face))))

  (use-package org
    :hook (org-mode . amf/org-mode-setup)
    :config
    (setq org-ellipsis " ▾")
    (amf/org-font-setup))

  (use-package org-bullets
    :after org
    :ensure t
    :config
    (add-hook 'org-mode-hook #'org-bullets-mode)
    (setq inhibit-compacting-font-caches t))
#+END_SRC


Org mode Timer
#+BEGIN_SRC emacs-lisp
  (setq org-clock-sound "~/.local/share/sounds/notification.wav")
#+END_SRC

** Org presentation
Precise behaviour of org-present during start and quit is controlled from hooks. The following will enlarge text, show images, hide the cursor and make the buffer read-only:
#+BEGIN_SRC emacs-lisp
  (use-package org-present)

  ;; Install visual-fill-column
  (unless (package-installed-p 'visual-fill-column)
    (package-install 'visual-fill-column))

  ;; Configure fill width
  (setq visual-fill-column-width 130
        visual-fill-column-center-text t)

  (defun amf/org-present-start ()
    ;; Tweak font sizes
    (setq-local face-remapping-alist '((default (:height 1.2) default)
                                       (header-line (:height 4.4) variable-pitch)
                                       (org-document-title (:height 4.5) variable-pitch)
                                       (org-code (:height 1.1)  default)
                                       (org-verbatim (:height 1.1) default)
                                       (org-block (:height 1.1) default)
                                       (org-block-begin-line (:height 0.7) default)))

    ;; Set a blank header line string to create blank space at the top
    (setq header-line-format " ")
    (display-line-numbers-mode 0)

    ;; Let the desktop background show through
    (set-frame-parameter (selected-frame) 'alpha '(90 . 100))
    (add-to-list 'default-frame-alist '(alpha . (90 . 90)))

    ;; Center the presentation and wrap lines
    (visual-fill-column-mode 1)
    (visual-line-mode 1))

  (defun amf/org-present-end ()
    ;; Reset font customizations
    (setq-local face-remapping-alist '((default default default)))

    ;; Set a blank header line string to create blank space at the top
    (setq header-line-format nil)
    (display-line-numbers-mode 1)

    ;; Let the desktop background show through
    (set-frame-parameter (selected-frame) 'alpha '(100 . 100))
    (add-to-list 'default-frame-alist '(alpha . (100 . 100)))

    ;; Stop centering the document
    (visual-fill-column-mode 0)
    (visual-line-mode 0))

  ;; Register hooks with org-present
  (add-hook 'org-present-mode-hook 'amf/org-present-start)
  (add-hook 'org-present-mode-quit-hook 'amf/org-present-end)


  ;; Load org-faces to make sure we can set appropriate faces
  (require 'org-faces)

  ;; Hide emphasis markers on formatted text
  (setq org-hide-emphasis-markers t)

  ;; Resize Org headings
  (dolist (face '((org-level-1 . 1.7)
                  (org-level-2 . 1.5)
                  (org-level-3 . 1.3)
                  (org-level-4 . 1.1)
                  (org-level-5 . 1.0)
                  (org-level-6 . 1.0)
                  (org-level-7 . 1.0)
                  (org-level-8 . 1.0)))
    (set-face-attribute (car face) nil :font "Fantasque Sans Mono" :weight 'medium :height (cdr face)))

  ;; Make the document title a bit bigger
  (set-face-attribute 'org-document-title nil :font "Fantasque Sans Mono" :weight 'bold :height 1.5)

  ;; Make sure certain org faces use the fixed-pitch face when variable-pitch-mode is on
  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-table nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-formula nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)

  (defun amf/org-present-prepare-slide (buffer-name heading)
    ;; Show only top-level headlines
    (org-overview)

    ;; Unfold the current entry
    (org-show-entry)

    ;; Show only direct subheadings of the slide but don't expand them
    (org-show-children))
  (add-hook 'org-present-after-navigate-functions 'amf/org-present-prepare-slide)
#+END_SRC

** Create Table of Contents
Toc-org helps you to have an up-to-date table of contents in org files without exporting (useful useful for README files on GitHub).  Use :TOC: to create the table.
#+BEGIN_SRC emacs-lisp
  (use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+END_SRC

** Org Todo Keywords
This lets us create the various TODO tags that we can use in Org.
#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords        ; This overwrites the default Doom org-todo-keywords
        '((sequence
           "TODO(t)"           ; A task that is considered
           "DOING(t)"          ; A task that is accomplish now
           "DONE(d)"           ; Task has been completed
           "IMPORTANT(I)"      ; A task with very high priority
           "READY(g)"          ; A task that is ready to be tackled
           "DRAFT(p)"          ; A task that is drafted
           "ARCHIVE(c)"        ; Archive for later on
           "WAIT(w)"           ; Something is holding up this task
           "|"                 ; The pipe necessary to separate "active" states and "inactive" states
           "CANCELLED(c)" )))  ; Task has been cancelled
#+END_SRC

** Enhancement
This mode causes significant slowdown!
I have looked into the matter in the past, and from what I understand the usual cause
of this is relates to a deeper rooted issue involving fonts and font-lock reliant packages
#+BEGIN_SRC emacs-lisp
  (setq inhibit-compacting-font-caches t)
#+END_SRC

* Footer
#+BEGIN_SRC emacs-lisp
  ;; (server-mode t)
  (provide 'init)
   ;;; init.el ends here
#+END_SRC
